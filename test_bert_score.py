"""
To compare SQL generated with Golden query (generated by another LLM)
"""

import re

import bert_score
from langchain_community.chat_models.oci_generative_ai import ChatOCIGenAI

from core_functions import (
    create_db_engine,
    get_formatted_schema,
    generate_sql_query_with_models,
)
from utils import get_console_logger
from config_private import ENDPOINT, COMPARTMENT_OCID, MODEL_LIST


sql_queries = [
    # 1. Retrieve the product names and the total amount sold for each product.
    "SELECT p.prod_name, SUM(s.amount_sold) AS total_amount_sold FROM products p JOIN sales s ON p.prod_id = s.prod_id GROUP BY p.prod_name",
    # 2. List the product names, product categories, and sales channels used by customers from Italy.
    "SELECT p.prod_name, p.prod_category, ch.channel_desc FROM products p JOIN sales s ON p.prod_id = s.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN channels ch ON s.channel_id = ch.channel_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_name = 'Italy'",
    # 3. Find the customer names, products purchased, and promotions used by customers in the 'Catalog' channel.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, p.prod_name, pr.promo_name FROM customers c JOIN sales s ON c.cust_id = s.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Catalog'",
    # 4. Get the list of sales including product names, customer names, and customer regions for purchases made in 1998.
    "SELECT p.prod_name, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, co.country_region FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id WHERE EXTRACT(YEAR FROM s.time_id) = 1998",
    # 5. List the promotion names, customer names, and cities of customers who used these promotions. Limit only to first 50 rows.
    "SELECT pr.promo_name, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id WHERE ROWNUM <= 50",
    # 6. Find the product names, subcategories, and promotion names used for products sold in Asia.
    "SELECT p.prod_name, p.prod_subcategory, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_region = 'Asia'",
    # 7. Get the list of customers, products purchased, and sales channels for sales that took place during the summer of 1998.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, p.prod_name, ch.channel_desc FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE EXTRACT(YEAR FROM s.time_id) = 1998 AND EXTRACT(MONTH FROM s.time_id) IN (6, 7, 8)",
    # 8. Find the customer names and their cities who purchased products through the 'Tele Sales' channel and used promotions with a cost greater than 1000.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Tele Sales' AND pr.promo_cost > 1000",
    # 9. Find the promotion names, promotion categories, and cities of customers who participated in these promotions. Limit only to first 50 rows.
    "SELECT pr.promo_name, pr.promo_category, c.cust_city FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id WHERE ROWNUM <= 50",
    # 10. Get the list of customers, product names, sales channel names, and promotion names used for each sale in 1998. Limit only to first 50 rows.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, p.prod_name, ch.channel_desc, pr.promo_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id JOIN promotions pr ON s.promo_id = pr.promo_id WHERE EXTRACT(YEAR FROM s.time_id) = 1998 AND ROWNUM <= 50",
    # 11. List the customer names, their income levels, and products purchased by customers from Japan.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_income_level, p.prod_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_name = 'Japan'",
    # 12. Find the product category names, customer regions, and sales channel names for sales made through the 'Direct Sales' channel.
    "SELECT p.prod_category, co.country_region, ch.channel_desc FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Direct Sales'",
    # 13. Get the list of promotions, product names, customer regions, and sales channel names used for each sale. Get only first 30 rows.
    "SELECT pr.promo_name, p.prod_name, co.country_region, ch.channel_desc FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ROWNUM <= 30",
    # 14. Find the product names, subcategories, customer names, and cities of customers who purchased these products. Get only first 30 rows.
    "SELECT p.prod_name, p.prod_subcategory, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id WHERE ROWNUM <= 30",
    # 15. List the product category names, customer names, and promotion names used for each sale made in Europe.
    "SELECT p.prod_category, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_region = 'Europe'",
    # 16. Find the customer names, cities, and promotion names for sales that occurred in the 'Indirect' channel.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city, pr.promo_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_class = 'Indirect'",
    # 17. Get the list of sales including product names, categories, and customer regions for sales with an amount greater than 1000.
    "SELECT p.prod_name, p.prod_category, co.country_region FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id WHERE s.amount_sold > 1000",
    # 18. Find the product names and promotions used for those products sold in the 'Catalog' channel.
    "SELECT p.prod_name, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Catalog'",
    # 19. List the customer names, product names, and subcategories for sales made through promotions with a cost less than 500. Get only first 60 rows.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, p.prod_name, p.prod_subcategory FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id WHERE pr.promo_cost < 500 AND ROWNUM <= 60",
    # 20. Find the customer names, cities, product categories, and promotion names for sales that occurred in 1999.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city, p.prod_category, pr.promo_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id WHERE EXTRACT(YEAR FROM s.time_id) = 1999",
    # 21. Get the list of customers, their income levels, product names purchased, and sales channels used.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_income_level, p.prod_name, ch.channel_desc FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id",
    # 22. Find the promotion names, sales channel names, and product names sold in Asia through these promotions.
    "SELECT pr.promo_name, ch.channel_desc, p.prod_name FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE co.country_region = 'Asia'",
    # 23. List the customer names, their cities, and product category names purchased through the 'Tele Sales' channel.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city, p.prod_category FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Tele Sales'",
    # 24. Find the product names and cities of customers who purchased these products through promotions active before 1998.
    "SELECT p.prod_name, c.cust_city FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id WHERE pr.promo_begin_date < TO_DATE('1998-01-01', 'YYYY-MM-DD')",
    # 25. Get the list of product names, their categories, customer names, and sales channels used.
    "SELECT p.prod_name, p.prod_category, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, ch.channel_desc FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN channels ch ON s.channel_id = ch.channel_id",
    # 26. Find the promotion names, subcategories, customer cities, and sales channels used for each sale.
    "SELECT pr.promo_name, pr.promo_subcategory, c.cust_city, ch.channel_desc FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id JOIN channels ch ON s.channel_id = ch.channel_id",
    # 27. List the product names, categories, customer regions, and promotion names for sales made in North America.
    "SELECT p.prod_name, p.prod_category, co.country_region, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_region = 'North America'",
    # 28. Find the customer names, their incomes, cities, and product names purchased through the 'Direct Sales' channel.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_income_level, c.cust_city, p.prod_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Direct Sales'",
    # 29. Get the list of promotion names, customer names, cities, and regions for each sale made in Europe.
    "SELECT pr.promo_name, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city, co.country_region FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_region = 'Europe'",
    # 30. Find the product names, their subcategories, promotion names for sales that occurred in the 'Catalog' channel.
    "SELECT p.prod_name, p.prod_subcategory, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Catalog'",
    # 31. List the customer names, cities, regions, and product names purchased through promotions active before 1999.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city, co.country_region, p.prod_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN countries co ON c.country_id = co.country_id JOIN promotions pr ON s.promo_id = pr.promo_id WHERE pr.promo_begin_date < TO_DATE('1999-01-01', 'YYYY-MM-DD')",
    # 32. Find the customer names, product names, and product categories purchased through the 'Indirect' channel.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, p.prod_name, p.prod_category FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_class = 'Indirect'",
    # 33. Get the list of promotion names, product names, customer cities, and sales channels used.
    "SELECT pr.promo_name, p.prod_name, c.cust_city, ch.channel_desc FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id",
    # 34. Find the customer names, their incomes, product names, and cities for sales that occurred in 1999.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_income_level, p.prod_name, c.cust_city FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id WHERE EXTRACT(YEAR FROM s.time_id) = 1999",
    # 35. List the product names, categories, customer names, and promotion names used for sales made in Europe.
    "SELECT p.prod_name, p.prod_category, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_region = 'Europe'",
    # 36. Find the promotion names, categories, customer names, and regions for each sale made through the 'Direct Sales' channel.
    "SELECT pr.promo_name, pr.promo_category, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, co.country_region FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Direct Sales'",
    # 37. Get the list of product names, their categories, customer names, and cities for sales with an amount greater than 1500.
    "SELECT p.prod_name, p.prod_category, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id WHERE s.amount_sold > 1500",
    # 38. Find the customer names, promotion names, cities, and regions for sales that occurred in the 'Tele Sales' channel.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, pr.promo_name, c.cust_city, co.country_region FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN countries co ON c.country_id = co.country_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Tele Sales'",
    # 39. List the product names, categories, and promotion names used for each sale.
    "SELECT p.prod_name, p.prod_category, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id",
    # 40. Find the customer names, their incomes, cities, and promotion names used for each sale made in Asia.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_income_level, c.cust_city, pr.promo_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_region = 'Asia'",
    # 41. Get the list of product names, categories, sales channel names, and promotion names used.
    "SELECT p.prod_name, p.prod_category, ch.channel_desc, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id JOIN promotions pr ON s.promo_id = pr.promo_id",
    # 42. Find the promotion names, categories, customer names, and product names sold through the 'Catalog' channel.
    "SELECT pr.promo_name, pr.promo_category, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, p.prod_name FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Catalog'",
    # 43. List the customer names, their cities, product names, and sales channels used for sales made before 1999.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city, p.prod_name, ch.channel_desc FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE s.time_id < TO_DATE('1999-01-01', 'YYYY-MM-DD')",
    # 44. Find the customer names, promotion names, cities, and product names for sales that occurred in the 'Indirect' channel.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, pr.promo_name, c.cust_city, p.prod_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN products p ON s.prod_id = p.prod_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_class = 'Indirect'",
    # 45. Get the list of product names, categories, customer cities, and promotion names used.
    "SELECT p.prod_name, p.prod_category, c.cust_city, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id",
    # 46. Find the customer names, their incomes, regions, and promotion names used for each sale made in North America.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_income_level, co.country_region, pr.promo_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_region = 'North America'",
    # 47. List the product names, categories, regions, and promotion names used for sales made through the 'Direct Sales' channel.
    "SELECT p.prod_name, p.prod_category, co.country_region, pr.promo_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Direct Sales'",
    # 48. Find the customer names, their cities, product names, and promotion names used for sales made in 1998.
    "SELECT c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city, p.prod_name, pr.promo_name FROM sales s JOIN customers c ON s.cust_id = c.cust_id JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id WHERE EXTRACT(YEAR FROM s.time_id) = 1998",
    # 49. Get the list of promotion names, product categories, customer names, and cities for each sale made in Asia. Get only first 50 rows.
    "SELECT pr.promo_name, p.prod_category, c.cust_first_name || ' ' || c.cust_last_name AS customer_name, c.cust_city FROM sales s JOIN promotions pr ON s.promo_id = pr.promo_id JOIN products p ON s.prod_id = p.prod_id JOIN customers c ON s.cust_id = c.cust_id JOIN countries co ON c.country_id = co.country_id WHERE co.country_region = 'Asia' AND ROWNUM <= 50",
    # 50. Find the product names, their categories, promotion names, and customer names for sales that occurred through the 'Catalog' channel.
    "SELECT p.prod_name, p.prod_category, pr.promo_name, c.cust_first_name || ' ' || c.cust_last_name AS customer_name FROM sales s JOIN products p ON s.prod_id = p.prod_id JOIN promotions pr ON s.promo_id = pr.promo_id JOIN customers c ON s.cust_id = c.cust_id JOIN channels ch ON s.channel_id = ch.channel_id WHERE ch.channel_desc = 'Catalog'",
]

# SH schema
# Nome del file da leggere
TESTS_FILE_NAME = "testsh50.txt"

# Leggi il file riga per riga e carica ogni riga in una lista
with open(TESTS_FILE_NAME, "r", encoding="UTF-8") as file:
    USER_QUERIES = [linea.strip() for linea in file]

logger = get_console_logger()


model_list = [
    ChatOCIGenAI(
        # 0 is currently llama3-70B
        model_id=MODEL_LIST[0],
        service_endpoint=ENDPOINT,
        compartment_id=COMPARTMENT_OCID,
        model_kwargs={"temperature": 0, "max_tokens": 2048},
    ),
    ChatOCIGenAI(
        model_id=MODEL_LIST[1],
        service_endpoint=ENDPOINT,
        compartment_id=COMPARTMENT_OCID,
        model_kwargs={"temperature": 0, "max_tokens": 2048},
    ),
]

engine = create_db_engine()

# create the schema with Llama3
SCHEMA = get_formatted_schema(engine, model_list[0])

print("")

# to limit how many we test
TO_TEST = 3

# put the generated sql in another list
generated_sql_list = []

sql_queries = sql_queries[:TO_TEST]
USER_QUERIES = USER_QUERIES[:TO_TEST]

i = 0
print("")
for user_query, sql_query in zip(USER_QUERIES, sql_queries):
    i += 1

    print("Generating query: ", i)

    # what happens if query is wrong?
    sql_query_generated = generate_sql_query_with_models(
        user_query, SCHEMA, engine, model_list, verbose=True
    )

    # normalize
    sql_query_generated = sql_query_generated.replace("\n", " ")
    sql_query_generated = re.sub(r"\s+", " ", sql_query_generated)

    generated_sql_list.append(sql_query_generated)

generated_sql_list = generated_sql_list[:TO_TEST]
sql_queries = sql_queries[:TO_TEST]

# Calculate BERTScore
print("")
print("Computing BERT score...")
print("")
P, R, F1 = bert_score.score(generated_sql_list, sql_queries, lang="en", verbose=True)

for i, (p, r, f) in enumerate(zip(P, R, F1)):
    print(f"SQL Pair {i+1}:")
    print(f"Precision: {p:.4f}, Recall: {r:.4f}, F1 Score: {f:.4f}")
    print("")
